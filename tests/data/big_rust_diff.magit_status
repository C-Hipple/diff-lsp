Project: magit: diff-lsp
Root: /home/chris/diff-lsp/
Buffer: diff-lsp
Type: magit-status
Head:     feature/properly-parse-code-review some work and have it working e2e, still wrong mapping
Push:     origin/feature/properly-parse-code-review some work and have it working e2e, still wrong mapping

Unstaged changes (3)
modified   src/lib.rs
@@ -290,6 +290,7 @@ impl MagitDiff {
         let mut building_hunk = false;
         let mut hunk_start = 0;
         let mut start_new: u16 = 0;
+        let mut at_source_line: u16 = 0;
 
         for (i, line) in source.lines().enumerate() {
             if !found_headers {
@@ -317,6 +318,7 @@ impl MagitDiff {
                     hunk_start = i + 1; // diff_location doesn't include the @@ line
                     println!("({:?}) Parsing Header `{}`", i, line);
                     start_new = parse_header(line).unwrap().2;
+                    at_source_line = 0;
                     continue;
                 }
                 if (line.starts_with("@@") && building_hunk) || line.starts_with("Recent commits") {
@@ -324,6 +326,8 @@ impl MagitDiff {
 
                     if line.starts_with("@@") {
                         println!("B: ({:?}) Setting Header: `{}`", i, line);
+                        start_new = parse_header(line).unwrap().2;
+                        at_source_line = 0;
                         continue;
                     }
                     if line.starts_with("Recent commits") {
@@ -332,21 +336,28 @@ impl MagitDiff {
                 }
 
                 if building_hunk && !line.starts_with("modified ") {
+                    let line_type = LineType::from_line(line);
+                    let diff_line = DiffLine {
+                        line_type: line_type,
+                        line: line.to_string(),
+                        pos_in_hunk: (i - hunk_start) as u16,
+                        // source_line_number: SourceLineNumber(start_new + ((i - hunk_start) as u16)),
+                        source_line_number: SourceLineNumber(start_new + at_source_line),
+                    };
+
                     diff.lines_map.insert(
                         InputLineNumber::new((i + 1).try_into().unwrap()),
-                        (
-                            current_filename.to_string(),
-                            DiffLine {
-                                line_type: LineType::from_line(line),
-                                line: line.to_string(),
-                                pos_in_hunk: (i - hunk_start) as u16,
-                                source_line_number: SourceLineNumber(
-                                    start_new + ((i - hunk_start) as u16),
-                                ),
-                            },
-                        ),
+                        (current_filename.to_string(), diff_line.clone()),
+                    );
+
+                    if matches!(line_type, LineType::Added | LineType::Unmodified) {
+                        at_source_line += 1;
+                    }
+
+                    println!(
+                        "C: ({:?})Adding line @ {:?} `{}`",
+                        i, diff_line.source_line_number.0, line
                     );
-                    println!("C: ({:?})Adding line `{}`", i, line);
                     continue;
                 }
             }
modified   src/server.rs
@@ -276,7 +276,8 @@ impl LanguageServer for DiffLsp {
             Some(sm) => sm,
             None => {
                 info!("Did not find a source map for this hover!");
-                return Err(LspError::new(ErrorCode::ServerError(1)))},
+                return Err(LspError::new(ErrorCode::ServerError(1)));
+            }
         };
 
         info!("source map: {:?}", source_map);
@@ -413,8 +414,7 @@ impl LanguageServer for DiffLsp {
             .text_document_position_params
             .text_document
             .uri = uri;
-        mapped_params.text_document_position_params.position.line = source_map.source_line.0.into() ;
-
+        mapped_params.text_document_position_params.position.line = source_map.source_line.0.into();
 
         if source_map.source_line_type != LineType::Unmodified {
             // this is a problem for 1 letter variables since emacs won't send the hover request
modified   tests/test_lib.rs
@@ -1,10 +1,9 @@
 #[cfg(test)]
 mod tests {
     use diff_lsp::{
-        uri_from_relative_filename, CodeReviewDiff, DiffHeader, DiffLine, LineType, MagitDiff,
-        Parsable, ParsedDiff, SourceLineNumber,
+        uri_from_relative_filename, CodeReviewDiff, DiffHeader, LineType, MagitDiff, Parsable,
+        ParsedDiff, SourceLineNumber,
     };
-    use itertools::Itertools;
     use std::fs;
 
     #[test]
@@ -23,66 +22,7 @@ mod tests {
 
     #[test]
     fn test_parse_magit_diff() {
-        let raw_diff = r#"Project: magit: diff-lsp
-Root: /Users/chrishipple/diff-lsp/
-Buffer: diff-lsp
-Type: magit-status
-Head:     main readme typo
-Merge:    origin/main readme typo
-Push:     origin/main readme typo
-
-Unstaged changes (1)
-modified   src/client.rs
-@@ -60,9 +60,10 @@ impl LspClient {
-                 text_document: {
-                     Some(TextDocumentClientCapabilities {
-                         hover: Some(HoverClientCapabilities::default()),
--                        ..Default::default()
--                    })
--                },
-+                        references: Some(ReferenceClientCapabilities{
-+                            include_declaration: true
-+                        }),
-+                        ..Default::default()},
-                 window: None,
-                 general: None,
-                 experimental: None,
-@@ -72,17 +73,17 @@ impl LspClient {
-             client_info: None,
-             locale: None,
-         };
--        let message = "initialize".to_string();
-+        let message_type = "initialize".to_string();  // TODO: Is there an enum for this?
-
--        let raw_resp = self.send_request(message, params).unwrap();
-+        let raw_resp = self.send_request(message_type, params).unwrap();
-         let resp: InitializeResult = serde_json::from_value(raw_resp).unwrap();
-         println!("We got the response: {resp:?}");
-
-         return Ok(resp);
-     }
-
--    pub fn send_request<P: Serialize>(&mut self, message: String, params: P) -> Result<Value> {
--        if message == "initialize".to_string() {
-+    pub fn send_request<P: Serialize>(&mut self, message_type: String, params: P) -> Result<Value> {
-+        if message_type == "initialize".to_string() {
-             let _ser_params = serde_json::to_value(params).unwrap();
-             let raw_resp = self.send_value_request(_ser_params).unwrap();
-             let as_value: Value = serde_json::from_str(&raw_resp).unwrap();
-
-Recent commits
-97f1e20 origin/main readme typo
-f3b9f94 send message and serialize response (init message atleast)
-803d9f2 send message with full body, work on parse resposne
-6edde96 MVP--We can send the stdin message to server; working on format & reading response
-f3cad47 MVP of starting the server and reading the stdout
-d083654 more readme
-577afab Create rust.yml
-9ce2121 working on adding the client
-8ffb4ce Added hover support with static suggestion
-4d7867a following tutorial on tower-lsp
-
-"#;
+        let raw_diff = fs::read_to_string("tests/data/rust_diff.magit_status").unwrap();
         let parsed_diff = MagitDiff::parse(&raw_diff).unwrap();
         assert_eq!(
             parsed_diff.headers.get(&DiffHeader::Buffer),
@@ -140,6 +80,22 @@ d083654 more readme
         assert_eq!(map.file_name, String::from("main.go"));
     }
 
+    #[test]
+    fn test_source_map_multiple_hunks() {
+        let raw_diff = fs::read_to_string("tests/data/rust_diff.magit_status").unwrap();
+        let diff = MagitDiff::parse(&raw_diff).unwrap();
+
+        for (k, v) in diff.lines_map.iter() {
+            println!("lines map: {:?} => {:?}", k, v);
+        }
+
+        let map = diff.map_diff_line_to_src(26).unwrap();
+        assert_eq!(map.source_line_type, LineType::Unmodified);
+        assert_eq!(map.source_line, SourceLineNumber(73));
+
+        // assert!(false);
+    }
+
     #[test]
     fn test_parse_simple_code_review_buffer() {
         let go_code_review_diff = fs::read_to_string("tests/data/go_diff.code_review").unwrap();

Recent commits
05ddb4a origin/feature/properly-parse-code-review some work and have it working e2e, still wrong mapping
2a291b9 real progress on new parsing style, magit diff basically done
90da03a about to remove old hunk parsing
47d198e prints
dec34bb code review also use updated format
6a70d60 updated parsing of hunks using diffline
085d094 refactor: Make logfile_path a constant
a7d8df0 chore: Remove debug print statement for logfile path
677c8c8 refactor: Rename functions for clarity and consistency
cc464f9 refactor: rename get_init functions to improve clarity
